import React from "react";
import "./FormElement.css";
declare const TextField: React.ForwardRefExoticComponent<Pick<TextfieldI, "onChange" | "name" | "error" | "innerPreIcon" | "innerSufIcon" | "autocomplete" | "clearButton" | "strength" | "show" | "helpIcon" | "disabled" | "controlStates" | "thickness" | "hotjarEncryption" | "value" | "type" | "placeHolder" | "showHelp" | "suffix" | "prefix" | "onEnter" | "onblur" | "onKeyUp" | "onFocus" | "onBackspace" | "readOnly" | "id" | "loading" | "required" | "min" | "max" | "tabIndex" | "clearFunction" | "maxlength" | "autoFocus"> & React.RefAttributes<unknown>>;
export interface TextfieldI {
    onChange?: (e: string) => void;
    value?: string | number;
    name?: string | React.ReactNode;
    type?: "text" | "number" | "password" | "tel" | "url" | "email";
    placeHolder?: string;
    innerPreIcon?: React.ReactNode;
    innerSufIcon?: React.ReactNode;
    showHelp?: string;
    helpIcon?: React.ReactNode;
    suffix?: string | React.ReactNode;
    prefix?: string | React.ReactNode;
    onEnter?: () => void;
    onblur?: () => void;
    onKeyUp?: () => void;
    onFocus?: () => void;
    onBackspace?: () => void;
    thickness?: "thin" | "thick";
    readOnly?: boolean;
    id?: string;
    error?: boolean;
    controlStates?: "Sucess" | "Warning" | "Error" | any;
    loading?: boolean;
    autocomplete?: string;
    clearButton?: boolean;
    required?: boolean;
    min?: number;
    max?: number;
    tabIndex?: number;
    clearFunction?: () => void;
    show?: boolean;
    maxlength?: number | string | any;
    strength?: boolean;
    disabled?: boolean;
    autoFocus?: boolean;
    ref?: any;
    hotjarEncryption?: boolean;
}
export default TextField;
